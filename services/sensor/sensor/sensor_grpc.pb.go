// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: services/sensor/sensor/sensor.proto

package sensor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SensorClient is the client API for Sensor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorClient interface {
	GetSensorState(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*SensorState, error)
	GetSensorStates(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (Sensor_GetSensorStatesClient, error)
}

type sensorClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorClient(cc grpc.ClientConnInterface) SensorClient {
	return &sensorClient{cc}
}

func (c *sensorClient) GetSensorState(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*SensorState, error) {
	out := new(SensorState)
	err := c.cc.Invoke(ctx, "/sensor.Sensor/GetSensorState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorClient) GetSensorStates(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (Sensor_GetSensorStatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sensor_ServiceDesc.Streams[0], "/sensor.Sensor/GetSensorStates", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorGetSensorStatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sensor_GetSensorStatesClient interface {
	Recv() (*SensorState, error)
	grpc.ClientStream
}

type sensorGetSensorStatesClient struct {
	grpc.ClientStream
}

func (x *sensorGetSensorStatesClient) Recv() (*SensorState, error) {
	m := new(SensorState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorServer is the server API for Sensor service.
// All implementations must embed UnimplementedSensorServer
// for forward compatibility
type SensorServer interface {
	GetSensorState(context.Context, *DummyRequest) (*SensorState, error)
	GetSensorStates(*DummyRequest, Sensor_GetSensorStatesServer) error
	mustEmbedUnimplementedSensorServer()
}

// UnimplementedSensorServer must be embedded to have forward compatible implementations.
type UnimplementedSensorServer struct {
}

func (UnimplementedSensorServer) GetSensorState(context.Context, *DummyRequest) (*SensorState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensorState not implemented")
}
func (UnimplementedSensorServer) GetSensorStates(*DummyRequest, Sensor_GetSensorStatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSensorStates not implemented")
}
func (UnimplementedSensorServer) mustEmbedUnimplementedSensorServer() {}

// UnsafeSensorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorServer will
// result in compilation errors.
type UnsafeSensorServer interface {
	mustEmbedUnimplementedSensorServer()
}

func RegisterSensorServer(s grpc.ServiceRegistrar, srv SensorServer) {
	s.RegisterService(&Sensor_ServiceDesc, srv)
}

func _Sensor_GetSensorState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServer).GetSensorState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensor.Sensor/GetSensorState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServer).GetSensorState(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sensor_GetSensorStates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DummyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SensorServer).GetSensorStates(m, &sensorGetSensorStatesServer{stream})
}

type Sensor_GetSensorStatesServer interface {
	Send(*SensorState) error
	grpc.ServerStream
}

type sensorGetSensorStatesServer struct {
	grpc.ServerStream
}

func (x *sensorGetSensorStatesServer) Send(m *SensorState) error {
	return x.ServerStream.SendMsg(m)
}

// Sensor_ServiceDesc is the grpc.ServiceDesc for Sensor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sensor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.Sensor",
	HandlerType: (*SensorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSensorState",
			Handler:    _Sensor_GetSensorState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSensorStates",
			Handler:       _Sensor_GetSensorStates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/sensor/sensor/sensor.proto",
}
